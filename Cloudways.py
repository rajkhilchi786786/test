import os
import logging
import sqlite3
import uuid
import random
import string
import time
import json
import requests
import asyncio
from datetime import datetime
from functools import wraps
from typing import Dict, Any, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler
)

# ---------------------------
# ·¥Ñ·¥è…¥Íú∞…™…¢·¥ú Ä·¥Ä·¥õ…™·¥è…¥
# ---------------------------
BOT_TOKEN = os.getenv("CLOUDWAYS_BOT_TOKEN") or "7668443193:AAEH9QeB5fZ4UeNw_SGkeB_dT8pHwv8YN68"
ADMIN_IDS = [7996314470, 7147401720]
REQUIRED_CHANNELS = ["@ItsMeVishalSupport", "@anniemusicsupport"]

DB_PATH = "cloudways_bot.db"
DEFAULT_CREDITS = 10

CLOUDWAYS_SIGNUP_API = "https://api.cloudways.com/api/v2/guest/signup"

# ---------------------------
#  ü·¥è…¢…¢…™…¥…¢
# ---------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("cloudways_bot")

# ---------------------------
# ·¥ú·¥õ…™ ü…™·¥õ è:  Ä·¥ú…¥  ô ü·¥è·¥Ñ·¥ã…™…¥…¢ …™…¥ ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥è Ä
# ---------------------------
def ·¥†…™Íú± ú·¥Ä ü_ Ä·¥ú…¥_ ô ü·¥è·¥Ñ·¥ã…™…¥…¢(func):
    @wraps(func)
    async def ·¥†…™Íú± ú·¥Ä ü_·¥° Ä·¥Ä·¥ò·¥ò·¥á Ä(*args, **kwargs):
        loop = asyncio.get_running_loop()
        return await loop.run_in_executor(None, lambda: func(*args, **kwargs))
    return ·¥†…™Íú± ú·¥Ä ü_·¥° Ä·¥Ä·¥ò·¥ò·¥á Ä

# ---------------------------
#  ô·¥è·¥õ ·¥Ñ ü·¥ÄÍú±Íú±
# ---------------------------
class ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú± ô·¥è·¥õ:
    def __init__(self, db_path=DB_PATH):
        self.db_path = db_path
        self._·¥†…™Íú± ú·¥Ä ü_·¥á…¥Íú±·¥ú Ä·¥á_·¥Ö ô()

    def _·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ(self):
        conn = sqlite3.connect(self.db_path, check_same_thread=False)
        conn.row_factory = sqlite3.Row
        return conn

    def _·¥†…™Íú± ú·¥Ä ü_·¥á…¥Íú±·¥ú Ä·¥á_·¥Ö ô(self):
        conn = self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ()
        cur = conn.cursor()
        cur.execute(f"""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                credits INTEGER DEFAULT {DEFAULT_CREDITS},
                used INTEGER DEFAULT 0,
                last_request TIMESTAMP
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS accounts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT,
                password TEXT,
                first_name TEXT,
                last_name TEXT,
                status TEXT,
                risk_score INTEGER,
                verification_sent BOOLEAN,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                user_id INTEGER,
                cloudways_response TEXT
            )
        """)
        conn.commit()
        conn.close()

    # ---------------------------
    # ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ç·¥á·¥ç ô·¥á ÄÍú± ú…™·¥ò ·¥Ñ ú·¥á·¥Ñ·¥ã
    # ---------------------------
    async def _·¥†…™Íú± ú·¥Ä ü_·¥Ñ ú·¥á·¥Ñ·¥ã_·¥Ñ ú·¥Ä…¥…¥·¥á ü_·¥ç·¥á·¥ç ô·¥á ÄÍú± ú…™·¥ò(self, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
        try:
            for channel in REQUIRED_CHANNELS:
                member = await context.bot.get_chat_member(channel, user_id)
                if member.status not in ['member', 'administrator', 'creator']:
                    return False
            return True
        except Exception:
            return False

    # ---------------------------
    #  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö
    # ---------------------------
    async def ·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_ ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå ·¥ú…¥·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.")
            return
            
        if not context.args:
            await update.message.reply_text("üìù Usage: /broadcast your message here")
            return
            
        message = " ".join(context.args)
        conn = self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ()
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM users")
        users = cur.fetchall()
        conn.close()
        
        success = 0
        failed = 0
        
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user["user_id"],
                    text=f"üì¢ **Broadcast** üì¢\n\n{message}"
                )
                success += 1
            except Exception:
                failed += 1
            await asyncio.sleep(0.1)
            
        await update.message.reply_text(f"üì® Broadcast results:\n‚úÖ Success: {success}\n‚ùå Failed: {failed}")

    # ---------------------------
    # ·¥úÍú±·¥á Ä & ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú± ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ
    # ---------------------------
    def ·¥†…™Íú± ú·¥Ä ü_·¥Ä·¥Ö·¥Ö_·¥úÍú±·¥á Ä_…™Íú∞_·¥ç…™Íú±Íú±…™…¥…¢(self, user_id: int, username: str):
        conn = self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ()
        cur = conn.cursor()
        cur.execute("INSERT OR IGNORE INTO users (user_id, username, credits, used) VALUES (?, ?, ?, ?)",
                    (user_id, username, DEFAULT_CREDITS, 0))
        conn.commit()
        conn.close()

    def ·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(self, user_id: int) -> int:
        if user_id in ADMIN_IDS:
            return 99999999
        conn = self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ()
        cur = conn.cursor()
        cur.execute("SELECT credits, used FROM users WHERE user_id=?", (user_id,))
        row = cur.fetchone()
        conn.close()
        if not row:
            return 0
        return max(0, row["credits"] - row["used"])

    def ·¥†…™Íú± ú·¥Ä ü_·¥õ Ä è_·¥Ñ·¥è…¥Íú±·¥ú·¥ç·¥á_·¥Ñ Ä·¥á·¥Ö…™·¥õ(self, user_id: int, amount: int = 1) -> bool:
        if user_id in ADMIN_IDS:
            return True
        conn = self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ()
        cur = conn.cursor()
        cur.execute("""
            UPDATE users
            SET used = used + ?, last_request = ?
            WHERE user_id = ? AND used + ? <= credits
        """, (amount, datetime.utcnow().isoformat(), user_id, amount))
        conn.commit()
        updated = cur.rowcount > 0
        conn.close()
        return updated

    def ·¥†…™Íú± ú·¥Ä ü_ Ä·¥áÍú∞·¥ú…¥·¥Ö_·¥Ñ Ä·¥á·¥Ö…™·¥õ(self, user_id: int, amount: int = 1):
        conn = self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ()
        cur = conn.cursor()
        cur.execute("UPDATE users SET used = used - ? WHERE user_id = ?", (amount, user_id))
        conn.commit()
        conn.close()

    # ---------------------------
    # ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥ò·¥á ÄÍú±…™Íú±·¥õ·¥á…¥·¥Ñ·¥á
    # ---------------------------
    def ·¥†…™Íú± ú·¥Ä ü_Íú±·¥Ä·¥†·¥á_·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ(self, user_id: int, details: Dict[str, Any], result: Dict[str, Any], cloudways_response: str = ""):
        conn = self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ()
        cur = conn.cursor()
        cur.execute('''
            INSERT INTO accounts (email, password, first_name, last_name, status, risk_score, verification_sent, user_id, cloudways_response)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            details.get("email"),
            details.get("password"),
            details.get("first_name"),
            details.get("last_name"),
            result.get("status", ""),
            int(result.get("risk_score", 0) or 0),
            1 if result.get("verification_sent") else 0,
            user_id,
            cloudways_response
        ))
        conn.commit()
        conn.close()

    # ---------------------------
    #  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥úÍú±·¥á Ä …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥è Ä
    # ---------------------------
    def ·¥†…™Íú± ú·¥Ä ü_ Ä·¥Ä…¥·¥Ö·¥è·¥ç_·¥úÍú±·¥á Ä_·¥Ö·¥á·¥õ·¥Ä…™ üÍú±(self, email: str):
        try:
            r = requests.get("https://randomuser.me/api/?nat=us", timeout=8)
            r.raise_for_status()
            data = r.json()["results"][0]["name"]
            first = data["first"].capitalize()
            last = data["last"].capitalize()
        except Exception:
            first = random.choice(["John", "Vishalpapa", "Rajpapa", "Mike", "Alex", "David", "Sarah", "Emma"])
            last = random.choice(["Smith", "Brown", "Jones", "Patel", "Kumar"])
        
        password_base = random.choice(["Vishal", "Rajowner"])
        password = f"{password_base}@{random.randint(1000,9999)}"
        
        return {"first_name": first, "last_name": last, "email": email, "password": password}

    # ---------------------------
    # ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ö·¥á·¥†…™·¥Ñ·¥á Íú∞…™…¥…¢·¥á Ä·¥ò Ä…™…¥·¥õ
    # ---------------------------
    def ·¥†…™Íú± ú·¥Ä ü_·¥Ö·¥á·¥†…™·¥Ñ·¥á_Íú∞…™…¥…¢·¥á Ä·¥ò Ä…™…¥·¥õ(self):
        device_id = str(uuid.uuid4())
        
        # ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥õ·¥Ä ü·¥è…¥ ·¥Ö·¥Ä·¥õ·¥Ä
        talon = {
            "device_id": ''.join(random.choices(string.ascii_lowercase + string.digits, k=16)),
            "session_id": str(uuid.uuid4()),
            "os": random.choice(["Android 14","iOS 17","Windows 11","macOS 14"]),
            "os_build": f"{random.randint(10000,99999)}.{random.randint(10,99)}",
            "cpu": random.choice(["Snapdragon 8 Gen 2","Apple A17","Intel i7-12700K","M2 Pro"]),
            "gpu": random.choice(["Adreno 740","Apple GPU","NVIDIA RTX 4080"]),
            "ram": f"{random.choice([4,6,8,12,16,32])}GB",
            "storage": f"{random.choice([64,128,256,512])}GB",
            "lang": random.choice(["en-US","en-GB","hi-IN"]),
            "timezone": "+05:30",
            "battery_level": random.randint(20, 95),
            "charging": random.choice([True, False]),
            "screen": f"{random.choice([1080,1440,1920])}x{random.choice([1920,2160])}",
            "device_model": random.choice(["Pixel 7 Pro","iPhone 14 Pro","Samsung S23 Ultra","OnePlus 11"]),
            "network": random.choice(["WiFi","4G","5G"]),
            "browser": random.choice([
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
                "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1"
            ]),
            "timestamp": datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z",
            "build_number": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),
            "app_version": f"{random.randint(1,5)}.{random.randint(0,9)}.{random.randint(0,9)}",
            "device_country": random.choice(["US","IN","GB","CA","AU"]),
            "device_language": random.choice(["en","hi","es","fr"]),
            "device_timezone": random.choice(["Asia/Kolkata","America/New_York","Europe/London"]),
            "screen_density": random.choice([2.0, 3.0, 2.5, 3.5]),
            "font_scale": random.choice([1.0, 1.1, 0.9, 1.2]),
        }
        return device_id, talon

    # ---------------------------
    # Íú±…™…¢…¥·¥ú·¥ò  Ä·¥áQ·¥ú·¥áÍú±·¥õ ( ô ü·¥è·¥Ñ·¥ã…™…¥…¢)
    # ---------------------------
    def _·¥†…™Íú± ú·¥Ä ü_Íú±…™…¢…¥·¥ú·¥ò_ Ä·¥áQ·¥ú·¥áÍú±·¥õ_ ô ü·¥è·¥Ñ·¥ã…™…¥…¢(self, details: Dict[str, str]) -> Dict[str, Any]:
        """
        ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç ·¥Ä  ô ü·¥è·¥Ñ·¥ã…™…¥…¢  ú·¥õ·¥õ·¥ò ·¥ò·¥èÍú±·¥õ ·¥õ·¥è ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú± Íú±…™…¢…¥·¥ú·¥ò ·¥á…¥·¥Ö·¥ò·¥è…™…¥·¥õ.
         Ä·¥á·¥õ·¥ú Ä…¥Íú± ·¥ò·¥Ä ÄÍú±·¥á·¥Ö ·¥äÍú±·¥è…¥ ·¥è Ä ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥Ö…™·¥Ñ·¥õ.
        """
        try:
            device_id, talon = self.·¥†…™Íú± ú·¥Ä ü_·¥Ö·¥á·¥†…™·¥Ñ·¥á_Íú∞…™…¥…¢·¥á Ä·¥ò Ä…™…¥·¥õ()
            payload = {
                "first_name": details["first_name"],
                "last_name": details["last_name"],
                "email": details["email"],
                "password": details["password"],
                "gdpr_consent": True,
                "promo_code": "",
                "persona_tag_id": 13,
                "signup_price_id": "b",
                "talonData": talon,
                "user_unique_id": str(uuid.uuid4()),
                "signup_page_template_id": 0
            }
            headers = {
                "User-Agent": talon["browser"],
                "Content-Type": "application/json",
                "x-device-id": device_id
            }
            resp = requests.post(CLOUDWAYS_SIGNUP_API, json=payload, headers=headers, timeout=20)
            try:
                response_data = resp.json()
                return {"success": True, "data": response_data, "status_code": resp.status_code}
            except ValueError:
                return {"success": False, "error": f"Non-JSON response: {resp.status_code}", "raw": resp.text, "status_code": resp.status_code}
        except Exception as e:
            return {"success": False, "error": str(e), "status_code": 0}

    @·¥†…™Íú± ú·¥Ä ü_ Ä·¥ú…¥_ ô ü·¥è·¥Ñ·¥ã…™…¥…¢
    def ·¥†…™Íú± ú·¥Ä ü_Íú±…™…¢…¥·¥ú·¥ò_ Ä·¥áQ·¥ú·¥áÍú±·¥õ(self, details):
        return self._·¥†…™Íú± ú·¥Ä ü_Íú±…™…¢…¥·¥ú·¥ò_ Ä·¥áQ·¥ú·¥áÍú±·¥õ_ ô ü·¥è·¥Ñ·¥ã…™…¥…¢(details)

    # ---------------------------
    # ·¥ò·¥Ä ÄÍú±·¥á  Ä·¥áÍú±·¥ú ü·¥õ
    # ---------------------------
    def ·¥†…™Íú± ú·¥Ä ü_·¥ò·¥Ä ÄÍú±·¥á_Íú±…™…¢…¥·¥ú·¥ò_ Ä·¥áÍú±·¥ú ü·¥õ(self, resp: Dict[str, Any]) -> Dict[str, Any]:
        try:
            if not resp.get("success"):
                return {
                    "success": False, 
                    "status": resp.get("error", "request_failed"),
                    "risk_score": 0,
                    "verification_sent": False,
                    "cloudways_response": resp
                }
            
            cloudways_data = resp.get("data", {})
            status_code = resp.get("status_code", 200)
            
            if status_code != 200:
                return {
                    "success": False,
                    "status": f"http_error_{status_code}",
                    "risk_score": 0,
                    "verification_sent": False,
                    "cloudways_response": cloudways_data
                }
            
            if "data" in cloudways_data and isinstance(cloudways_data["data"], dict):
                user_data = cloudways_data["data"].get("user", {})
                risk_score = user_data.get("risk_score", 0) or cloudways_data.get("risk_score", 0) or 0
                message = cloudways_data.get("message", "") or ""
                
                #  Ä…™Íú±·¥ã Íú±·¥Ñ·¥è Ä·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã - 100 ·¥è Ä ·¥Ä ô·¥è·¥†·¥á …™Íú± ·¥Ñ·¥è…¥Íú±…™·¥Ö·¥á Ä·¥á·¥Ö  ú…™…¢ ú  Ä…™Íú±·¥ã
                if risk_score >= 100:
                    return {
                        "success": False,
                        "status": " ú…™…¢ ú  Ä…™Íú±·¥ã Íú±·¥Ñ·¥è Ä·¥á - ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ…™·¥è…¥ Íú∞·¥Ä…™ ü·¥á·¥Ö",
                        "risk_score": risk_score,
                        "verification_sent": False,
                        "cloudways_response": cloudways_data
                    }
                
                return {
                    "success": True,
                    "status": cloudways_data.get("message", "created"),
                    "risk_score": risk_score,
                    "verification_sent": "verify" in message.lower() or cloudways_data.get("verification_sent", False),
                    "cloudways_response": cloudways_data
                }
            
            if cloudways_data.get("success") is False:
                return {
                    "success": False, 
                    "status": cloudways_data.get("error") or cloudways_data.get("message") or "failed",
                    "risk_score": 0,
                    "verification_sent": False,
                    "cloudways_response": cloudways_data
                }
            
            return {
                "success": True, 
                "status": cloudways_data.get("message", "ok"), 
                "risk_score": cloudways_data.get("risk_score", 0),
                "verification_sent": False,
                "cloudways_response": cloudways_data
            }
            
        except Exception as e:
            return {
                "success": False, 
                "status": f"parse_error:{e}",
                "risk_score": 0,
                "verification_sent": False,
                "cloudways_response": resp
            }

    # ---------------------------
    # …¢·¥á·¥õ ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú± ·¥è Ä…™…¢…™…¥·¥Ä ü  Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á ·¥õ·¥áx·¥õ
    # ---------------------------
    def ·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±_ Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á_·¥õ·¥áx·¥õ(self, cloudways_response: Dict[str, Any]) -> str:
        """·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ  Ä·¥á·¥Ä·¥Ö·¥Ä ô ü·¥á ·¥õ·¥áx·¥õ Íú∞ Ä·¥è·¥ç ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±  Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á"""
        try:
            if not cloudways_response:
                return "…¥·¥è  Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á ·¥Ö·¥Ä·¥õ·¥Ä"
            
            response_text = ""
            
            # ·¥Ñ ú·¥á·¥Ñ·¥ã Íú∞·¥è Ä ·¥á Ä Ä·¥è Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á
            if cloudways_response.get("error"):
                response_text += f"·¥á Ä Ä·¥è Ä: {cloudways_response.get('error')}\n"
            
            # ·¥Ñ ú·¥á·¥Ñ·¥ã Íú∞·¥è Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á
            if cloudways_response.get("message"):
                response_text += f"·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á: {cloudways_response.get('message')}\n"
            
            # ·¥Ñ ú·¥á·¥Ñ·¥ã Íú∞·¥è Ä Íú±·¥õ·¥Ä·¥õ·¥úÍú±
            if cloudways_response.get("status"):
                response_text += f"Íú±·¥õ·¥Ä·¥õ·¥úÍú±: {cloudways_response.get('status')}\n"
            
            # ·¥Ñ ú·¥á·¥Ñ·¥ã …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä Íú±·¥á·¥Ñ·¥õ…™·¥è…¥
            data_section = cloudways_response.get("data", {})
            if data_section:
                if data_section.get("message"):
                    response_text += f"·¥Ö·¥Ä·¥õ·¥Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á: {data_section.get('message')}\n"
                
                user_data = data_section.get("user", {})
                if user_data and isinstance(user_data, dict):
                    if user_data.get("risk_score"):
                        response_text += f" Ä…™Íú±·¥ã Íú±·¥Ñ·¥è Ä·¥á: {user_data.get('risk_score')}\n"
                    if user_data.get("status"):
                        response_text += f"·¥úÍú±·¥á Ä Íú±·¥õ·¥Ä·¥õ·¥úÍú±: {user_data.get('status')}\n"
            
            return response_text.strip() if response_text else "…¥·¥è ·¥Ö·¥á·¥õ·¥Ä…™ ü·¥á·¥Ö  Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á"
            
        except Exception as e:
            return f"·¥á Ä Ä·¥è Ä ·¥ò·¥Ä ÄÍú±…™…¥…¢  Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á: {str(e)}"

    # ---------------------------
    # ·¥ç·¥ÄÍú±Íú± ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥
    # ---------------------------
    async def ·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_·¥ç·¥ÄÍú±Íú±(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "User"
        
        if not await self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ ú·¥á·¥Ñ·¥ã_·¥Ñ ú·¥Ä…¥…¥·¥á ü_·¥ç·¥á·¥ç ô·¥á ÄÍú± ú…™·¥ò(user_id, context):
            await update.message.reply_text("‚ùå **·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ä·¥è…™…¥ ·¥Ä ü ü  Ä·¥áQ·¥ú…™ Ä·¥á·¥Ö ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú± Íú∞…™ ÄÍú±·¥õ ·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú±  ô·¥è·¥õ.**")
            return
            
        self.·¥†…™Íú± ú·¥Ä ü_·¥Ä·¥Ö·¥Ö_·¥úÍú±·¥á Ä_…™Íú∞_·¥ç…™Íú±Íú±…™…¥…¢(user_id, username)

        if not context.args:
            await update.message.reply_text("üìù **·¥úÍú±·¥Ä…¢·¥á:** `/mass email1.com email2.com email3.com ...`", parse_mode="Markdown")
            return

        emails = [email.strip() for email in context.args if "@" in email and "." in email.split("@")[-1]]
        
        if not emails:
            await update.message.reply_text("‚ùå **…¥·¥è ·¥†·¥Ä ü…™·¥Ö ·¥á·¥ç·¥Ä…™ ü ·¥Ä·¥Ö·¥Ö Ä·¥áÍú±Íú±·¥áÍú± ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö.**")
            return

        available_credits = self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(user_id)
        if available_credits < len(emails):
            await update.message.reply_text(f"‚ùå **…™…¥Íú±·¥úÍú∞Íú∞…™·¥Ñ…™·¥á…¥·¥õ ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±.**  è·¥è·¥ú  ú·¥Ä·¥†·¥á `{available_credits}` ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±  ô·¥ú·¥õ  Ä·¥áQ·¥ú·¥áÍú±·¥õ·¥á·¥Ö `{len(emails)}` ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õÍú±.", parse_mode="Markdown")
            return

        if not self.·¥†…™Íú± ú·¥Ä ü_·¥õ Ä è_·¥Ñ·¥è…¥Íú±·¥ú·¥ç·¥á_·¥Ñ Ä·¥á·¥Ö…™·¥õ(user_id, len(emails)):
            await update.message.reply_text("üí≥ **…¥·¥è ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±  ü·¥áÍú∞·¥õ. ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ä·¥Ö·¥ç…™…¥.**")
            return

        progress_msg = await update.message.reply_text(f"üöÄ **Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥ç·¥ÄÍú±Íú± ·¥Ñ Ä·¥á·¥Ä·¥õ…™·¥è…¥ Íú∞·¥è Ä {len(emails)} ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õÍú±...**")
        
        success_count = 0
        failed_count = 0
        results = []

        for i, email in enumerate(emails, 1):
            try:
                await progress_msg.edit_text(f"üîÑ **·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú±…™…¥…¢ {i}/{len(emails)}: {email}**")
                
                details = self.·¥†…™Íú± ú·¥Ä ü_ Ä·¥Ä…¥·¥Ö·¥è·¥ç_·¥úÍú±·¥á Ä_·¥Ö·¥á·¥õ·¥Ä…™ üÍú±(email)
                resp = await self.·¥†…™Íú± ú·¥Ä ü_Íú±…™…¢…¥·¥ú·¥ò_ Ä·¥áQ·¥ú·¥áÍú±·¥õ(details)
                result = self.·¥†…™Íú± ú·¥Ä ü_·¥ò·¥Ä ÄÍú±·¥á_Íú±…™…¢…¥·¥ú·¥ò_ Ä·¥áÍú±·¥ú ü·¥õ(resp)
                
                # Íú±·¥Ä·¥†·¥á ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥°…™·¥õ ú ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±  Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á
                cloudways_response_json = json.dumps(resp.get("data", {}) if resp.get("success") else resp)
                self.·¥†…™Íú± ú·¥Ä ü_Íú±·¥Ä·¥†·¥á_·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ(user_id, details, result, cloudways_response_json)
                
                risk_score = result.get("risk_score", 0)

                if result.get("success") and risk_score < 100 and risk_score > 0:
                    success_count += 1
                    results.append(f"‚úÖ **Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±:** {email} |  Ä…™Íú±·¥ã: {risk_score}")
                else:
                    failed_count += 1
                    cloudways_text = self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±_ Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á_·¥õ·¥áx·¥õ(result.get("cloudways_response", {}))
                    if risk_score >= 100:
                        results.append(f"‚ùå ** ú…™…¢ ú  Ä…™Íú±·¥ã:** {email} |  Ä…™Íú±·¥ã: {risk_score} | {cloudways_text}")
                    else:
                        results.append(f"‚ùå **Íú∞·¥Ä…™ ü·¥á·¥Ö:** {email} | {cloudways_text}")

                await asyncio.sleep(2)  #  Ä·¥Ä·¥õ·¥á  ü…™·¥ç…™·¥õ…™…¥…¢

            except Exception as e:
                failed_count += 1
                results.append(f"‚ùå **·¥á Ä Ä·¥è Ä:** {email} | {str(e)}")
                continue

        # Íú±·¥á…¥·¥Ö Íú∞…™…¥·¥Ä ü  Ä·¥á·¥ò·¥è Ä·¥õ
        report = (
            "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            "        üéØ **·¥ç·¥ÄÍú±Íú± ·¥Ñ Ä·¥á·¥Ä·¥õ…™·¥è…¥  Ä·¥á·¥ò·¥è Ä·¥õ** üéØ\n"
            "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
            f"üìß **·¥õ·¥è·¥õ·¥Ä ü ·¥á·¥ç·¥Ä…™ üÍú±:** `{len(emails)}`\n"
            f"‚úÖ **Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü:** `{success_count}`\n"
            f"‚ùå **Íú∞·¥Ä…™ ü·¥á·¥Ö:** `{failed_count}`\n"
            f"üíé ** Ä·¥á·¥ç·¥Ä…™…¥…™…¥…¢ ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±:** `{self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(user_id)}`\n\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "üìã **·¥Ö·¥á·¥õ·¥Ä…™ ü·¥á·¥Ö  Ä·¥áÍú±·¥ú ü·¥õÍú±:**\n"
        )
        
        # Íú±·¥ò ü…™·¥õ  Ä·¥áÍú±·¥ú ü·¥õÍú± …™Íú∞ ·¥õ·¥è·¥è  ü·¥è…¥…¢ Íú∞·¥è Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á
        results_text = "\n".join(results)
        if len(report + results_text) > 4000:
            results_text = "\n".join(results[:15]) + f"\n\n... ·¥Ä…¥·¥Ö {len(results) - 15} ·¥ç·¥è Ä·¥á  Ä·¥áÍú±·¥ú ü·¥õÍú±"
        
        final_message = report + results_text + "\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        await progress_msg.delete()
        await update.message.reply_text(final_message, parse_mode="Markdown")

        # Íú±·¥á…¥·¥Ö ·¥Ä·¥Ö·¥ç…™…¥ …¥·¥è·¥õ…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥
        if success_count > 0:
            admin_message = (
                "üì¨ **·¥ç·¥ÄÍú±Íú± ·¥Ñ Ä·¥á·¥Ä·¥õ…™·¥è…¥ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö** üì¨\n\n"
                f"üë§ **·¥úÍú±·¥á Ä:** {username} ({user_id})\n"
                f"üìß **·¥õ·¥è·¥õ·¥Ä ü:** {len(emails)} ·¥á·¥ç·¥Ä…™ üÍú±\n"
                f"‚úÖ **Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±:** {success_count}\n"
                f"‚ùå **Íú∞·¥Ä…™ ü·¥á·¥Ö:** {failed_count}\n"
                f"üíé **·¥Ñ Ä·¥á·¥Ö…™·¥õÍú± ·¥úÍú±·¥á·¥Ö:** {len(emails)}"
            )
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(admin_id, admin_message, parse_mode="Markdown")
                except Exception:
                    pass

    # ---------------------------
    # ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  ú·¥Ä…¥·¥Ö ü·¥á ÄÍú±
    # ---------------------------
    async def ·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_Íú±·¥õ·¥Ä Ä·¥õ(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "User"
        self.·¥†…™Íú± ú·¥Ä ü_·¥Ä·¥Ö·¥Ö_·¥úÍú±·¥á Ä_…™Íú∞_·¥ç…™Íú±Íú±…™…¥…¢(user_id, username)
        
        if not await self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ ú·¥á·¥Ñ·¥ã_·¥Ñ ú·¥Ä…¥…¥·¥á ü_·¥ç·¥á·¥ç ô·¥á ÄÍú± ú…™·¥ò(user_id, context):
            keyboard = [
                [InlineKeyboardButton("üì¢ ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü 1", url=f"https://t.me/{REQUIRED_CHANNELS[0][1:]}")],
                [InlineKeyboardButton("üì¢ ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü 2", url=f"https://t.me/{REQUIRED_CHANNELS[1][1:]}")],
                [InlineKeyboardButton("‚úÖ …™'·¥†·¥á ·¥ä·¥è…™…¥·¥á·¥Ö", callback_data="check_join")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                "‚ú® **·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±  ô·¥è·¥õ!** ‚ú®\n"
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
                f"üë§ **·¥úÍú±·¥á Ä:** @{username}\n"
                f"üÜî **…™·¥Ö:** `{user_id}`\n"
                f"üíé **·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±:** `{self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(user_id)}`\n\n"
                "üîí **·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú±  ô·¥è·¥õ, ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú± Íú∞…™ ÄÍú±·¥õ.**\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                "¬ª¬ª‚Äî ÍØ≠ŒΩŒπ—ï–ΩŒ±LùÖÉ ‚ÇäÍØ≠‚ô°„ÇôÍØ≠. ¬ª ‚òÖ / ‚òÖ ‚≠ï“ìÕ•“ì…™·¥ÑÕ£…™Õ´Õ¢Õ¢Õ¢·¥Ä‚Ñì üá∑ AJ\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return

        await update.message.reply_text(
            "üëã **·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±  ô·¥è·¥õ!** üëã\n\n"
            f"üë§ **·¥úÍú±·¥á Ä:** @{username}\n"
            f"üÜî **…™·¥Ö:** `{user_id}`\n"
            f"üíé **·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±:** `{self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(user_id)}`\n\n"
            "üîß **·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±:**\n"
            "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "‚îÇ üíº `/create email@example.com` \n"
            "‚îÇ üöÄ `/mass email1.com email2.com ...`\n"
            "‚îÇ üí∞ `/credits` ‚Üí ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±\n"
            "‚îÇ üìä `/stats` ‚Üí  ô·¥è·¥õ Íú±·¥õ·¥Ä·¥õ…™Íú±·¥õ…™·¥ÑÍú± (·¥Ä·¥Ö·¥ç…™…¥)\n"
            "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "¬ª¬ª‚Äî ÍØ≠ŒΩŒπ—ï–ΩŒ±LùÖÉ ‚ÇäÍØ≠‚ô°„ÇôÍØ≠. ¬ª ‚òÖ / ‚òÖ ‚≠ï“ìÕ•“ì…™·¥ÑÕ£…™Õ´Õ¢Õ¢Õ¢·¥Ä‚Ñì üá∑ AJ\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
            parse_mode="Markdown"
        )

    async def ·¥†…™Íú± ú·¥Ä ü_ ú·¥Ä…¥·¥Ö ü·¥á_·¥Ñ·¥Ä ü ü ô·¥Ä·¥Ñ·¥ã(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "check_join":
            user_id = query.from_user.id
            if await self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ ú·¥á·¥Ñ·¥ã_·¥Ñ ú·¥Ä…¥…¥·¥á ü_·¥ç·¥á·¥ç ô·¥á ÄÍú± ú…™·¥ò(user_id, context):
                await query.edit_message_text(
                    "‚úÖ ** è·¥è·¥ú  ú·¥Ä·¥†·¥á Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥ä·¥è…™…¥·¥á·¥Ö ·¥Ä ü ü ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±!**\n\n"
                    f"üíé **·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±:** `{self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(user_id)}`\n\n"
                    "üìß **Íú±·¥õ·¥Ä Ä·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ…™…¥…¢:** `/create email@example.com`\n"
                    "üöÄ **·¥ç·¥ÄÍú±Íú± ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á:** `/mass email1.com email2.com ...`\n"
                    "üîç **·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±:** `/credits`",
                    parse_mode="Markdown"
                )
            else:
                keyboard = [
                    [InlineKeyboardButton("üì¢ ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü 1", url=f"https://t.me/{REQUIRED_CHANNELS[0][1:]}")],
                    [InlineKeyboardButton("üì¢ ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü 2", url=f"https://t.me/{REQUIRED_CHANNELS[1][1:]}")],
                    [InlineKeyboardButton("‚úÖ …™'·¥†·¥á ·¥ä·¥è…™…¥·¥á·¥Ö", callback_data="check_join")]
                ]
                await query.edit_message_text(
                    "‚ùå ** è·¥è·¥ú  ú·¥Ä·¥†·¥á…¥'·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö ·¥Ä ü ü  Ä·¥áQ·¥ú…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±  è·¥á·¥õ!**\n\n"
                    "·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ä·¥è…™…¥ ·¥Ä ü ü ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú± ·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú±  ô·¥è·¥õ.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

    async def ·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        await update.message.reply_text(f"üíé **·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±:** `{self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(user_id)}`", parse_mode="Markdown")

    async def ·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_·¥Ñ Ä·¥á·¥Ä·¥õ·¥á(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "User"
        
        if not await self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ ú·¥á·¥Ñ·¥ã_·¥Ñ ú·¥Ä…¥…¥·¥á ü_·¥ç·¥á·¥ç ô·¥á ÄÍú± ú…™·¥ò(user_id, context):
            await update.message.reply_text("‚ùå **·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ä·¥è…™…¥ ·¥Ä ü ü  Ä·¥áQ·¥ú…™ Ä·¥á·¥Ö ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú± Íú∞…™ ÄÍú±·¥õ ·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú±  ô·¥è·¥õ.**")
            return
            
        self.·¥†…™Íú± ú·¥Ä ü_·¥Ä·¥Ö·¥Ö_·¥úÍú±·¥á Ä_…™Íú∞_·¥ç…™Íú±Íú±…™…¥…¢(user_id, username)

        if not context.args:
            await update.message.reply_text("üìù **·¥úÍú±·¥Ä…¢·¥á:** `/create email@example.com`", parse_mode="Markdown")
            return

        email = context.args[0].strip()
        if "@" not in email or "." not in email.split("@")[-1]:
            await update.message.reply_text("‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥á·¥ç·¥Ä…™ ü Íú∞·¥è Ä·¥ç·¥Ä·¥õ.**")
            return

        if not self.·¥†…™Íú± ú·¥Ä ü_·¥õ Ä è_·¥Ñ·¥è…¥Íú±·¥ú·¥ç·¥á_·¥Ñ Ä·¥á·¥Ö…™·¥õ(user_id):
            await update.message.reply_text("üí≥ **…¥·¥è ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±  ü·¥áÍú∞·¥õ. ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ä·¥Ö·¥ç…™…¥. @Its_me_Vishall**")
            return

        details = self.·¥†…™Íú± ú·¥Ä ü_ Ä·¥Ä…¥·¥Ö·¥è·¥ç_·¥úÍú±·¥á Ä_·¥Ö·¥á·¥õ·¥Ä…™ üÍú±(email)

        progress_msg = await update.message.reply_text("üîÑ **·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™…¥…¢ ·¥õ·¥è ·¥ò Ä·¥èx è s·¥á Ä·¥†·¥á Ä..........**")
        await asyncio.sleep(1)
        await progress_msg.edit_text("·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥ò Ä·¥èx è s·¥á Ä·¥†·¥á Ä ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ‚úÖ")
        await asyncio.sleep(2)
        await progress_msg.edit_text("üöÄ **·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä ès ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ…™·¥è…¥  ô è·¥ò·¥Äss…™…¥…¢..........**")
        await asyncio.sleep(1)

        try:
            await progress_msg.edit_text("üîê **Íú±·¥á…¥·¥Ö…™…¥…¢  Ä·¥áQ·¥ú·¥áÍú±·¥õ ·¥õ·¥è ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±...**")
            resp = await self.·¥†…™Íú± ú·¥Ä ü_Íú±…™…¢…¥·¥ú·¥ò_ Ä·¥áQ·¥ú·¥áÍú±·¥õ(details)
            result = self.·¥†…™Íú± ú·¥Ä ü_·¥ò·¥Ä ÄÍú±·¥á_Íú±…™…¢…¥·¥ú·¥ò_ Ä·¥áÍú±·¥ú ü·¥õ(resp)
            
            # Íú±·¥Ä·¥†·¥á ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥°…™·¥õ ú ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±  Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á
            cloudways_response_json = json.dumps(resp.get("data", {}) if resp.get("success") else resp)
            self.·¥†…™Íú± ú·¥Ä ü_Íú±·¥Ä·¥†·¥á_·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ(user_id, details, result, cloudways_response_json)
            
            risk_score = result.get("risk_score", 0)
            cloudways_response_text = self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±_ Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á_·¥õ·¥áx·¥õ(result.get("cloudways_response", {}))

            # ·¥Ñ ú·¥á·¥Ñ·¥ã …™Íú∞  Ä…™Íú±·¥ã Íú±·¥Ñ·¥è Ä·¥á …™Íú± 100 ·¥è Ä ·¥Ä ô·¥è·¥†·¥á
            if risk_score >= 100:
                txt = (
                    "‚ùå **·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ…™·¥è…¥ Íú∞·¥Ä…™ ü·¥á·¥Ö!** ‚ùå\n\n"
                    f"üìß **·¥á·¥ç·¥Ä…™ ü:** `{details['email']}`\n"
                    f"‚ö†Ô∏è ** Ä·¥á·¥ÄÍú±·¥è…¥:** ` ú…™…¢ ú  Ä…™Íú±·¥ã Íú±·¥Ñ·¥è Ä·¥á - ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ…™·¥è…¥ Íú∞·¥Ä…™ ü·¥á·¥Ö`\n"
                    f"üéØ ** Ä…™Íú±·¥ã Íú±·¥Ñ·¥è Ä·¥á:** `{risk_score}`\n\n"
                    f"üìã **·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±  Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á:**\n`{cloudways_response_text}`\n\n"
                    f"üíé ** Ä·¥á·¥ç·¥Ä…™…¥…™…¥…¢ ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±:** `{self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(user_id)}`"
                )
                await progress_msg.delete()
                await update.message.reply_text(txt, parse_mode="Markdown")
                #  Ä·¥áÍú∞·¥ú…¥·¥Ö ·¥Ñ Ä·¥á·¥Ö…™·¥õ Íú∞·¥è Ä  ú…™…¢ ú  Ä…™Íú±·¥ã Íú∞·¥Ä…™ ü·¥ú Ä·¥á
                self.·¥†…™Íú± ú·¥Ä ü_ Ä·¥áÍú∞·¥ú…¥·¥Ö_·¥Ñ Ä·¥á·¥Ö…™·¥õ(user_id)
                return

            if risk_score == 0 or not result.get("success"):
                txt = (
                    "‚ùå **·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ…™·¥è…¥ Íú∞·¥Ä…™ ü·¥á·¥Ö!** ‚ùå\n\n"
                    f"üìß **·¥á·¥ç·¥Ä…™ ü:** `{details['email']}`\n\n"
                    f"üìã **·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±  Ä·¥áÍú±·¥ò·¥è…¥Íú±·¥á:**\n`{cloudways_response_text}`\n\n"
                    f"üíé ** Ä·¥á·¥ç·¥Ä…™…¥…™…¥…¢ ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±:** `{self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(user_id)}`"
                )
                await progress_msg.delete()
                await update.message.reply_text(txt, parse_mode="Markdown")
                #  Ä·¥áÍú∞·¥ú…¥·¥Ö ·¥Ñ Ä·¥á·¥Ö…™·¥õ Íú∞·¥è Ä Íú∞·¥Ä…™ ü·¥ú Ä·¥á
                self.·¥†…™Íú± ú·¥Ä ü_ Ä·¥áÍú∞·¥ú…¥·¥Ö_·¥Ñ Ä·¥á·¥Ö…™·¥õ(user_id)
            else:
                txt = (
                    "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                    "     ‚ú® **·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú± ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö!** ‚ú®\n"
                    "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
                    f"üë§ **…¥·¥Ä·¥ç·¥á:** `{details['first_name']} {details['last_name']}`\n"
                    f"üìß **·¥á·¥ç·¥Ä…™ ü:** `{details['email']}`\n"
                    f"üîë **·¥ò·¥ÄÍú±Íú±·¥°·¥è Ä·¥Ö:** `{details['password']}`\n"
                    f"üìä **Íú±·¥õ·¥Ä·¥õ·¥úÍú±:** `{result.get('status')}`\n"
                    f"‚ö†Ô∏è ** Ä…™Íú±·¥ã Íú±·¥Ñ·¥è Ä·¥á:** `{risk_score}`\n"
                    f"üì© **·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ Íú±·¥á…¥·¥õ:** `{result.get('verification_sent')}`\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    f"üíé ** Ä·¥á·¥ç·¥Ä…™…¥…™…¥…¢ ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±:** `{self.·¥†…™Íú± ú·¥Ä ü_…¢·¥á·¥õ_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(user_id)}`\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    "‚úÖ **Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±:** ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è! üéâ\n"
                    "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                    "     üîí  ¬ª¬ª‚Äî‚éØ‚Å†‚Å†‚Å†‚Å†‚ÄåÍØ≠ÍØ≠ŒΩŒπ—ï–ΩŒ±LùÖÉ ‚ÇäÍØ≠‚ô°„ÇôÍØ≠. ¬ª ** üîí\n"
                    "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                )

                await progress_msg.delete()
                await update.message.reply_text(txt, parse_mode="Markdown")

                owner_message = (
                    "üì¨ **…¥·¥á·¥° ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è** üì¨\n\n"
                    f"üë§ **·¥úÍú±·¥á Ä:** {username} ({user_id})\n"
                    f"üìß **·¥á·¥ç·¥Ä…™ ü:** `{details['email']}`\n"
                    f"üîë **·¥ò·¥ÄÍú±Íú±·¥°·¥è Ä·¥Ö:** `{details['password']}`\n"
                    f"üìä **Íú±·¥õ·¥Ä·¥õ·¥úÍú±:** `{result.get('status')}`\n"
                    f"‚ö†Ô∏è ** Ä…™Íú±·¥ã Íú±·¥Ñ·¥è Ä·¥á:** `{risk_score}`"
                )
                for admin_id in ADMIN_IDS:
                    try:
                        await context.bot.send_message(admin_id, owner_message, parse_mode="Markdown")
                    except Exception:
                        pass

        except Exception as e:
            await progress_msg.delete()
            await update.message.reply_text(f"üí• **·¥á Ä Ä·¥è Ä:** `{str(e)}`")
            #  Ä·¥áÍú∞·¥ú…¥·¥Ö ·¥Ñ Ä·¥á·¥Ö…™·¥õ Íú∞·¥è Ä ·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥
            self.·¥†…™Íú± ú·¥Ä ü_ Ä·¥áÍú∞·¥ú…¥·¥Ö_·¥Ñ Ä·¥á·¥Ö…™·¥õ(user_id)

    async def ·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_Íú±·¥õ·¥Ä·¥õÍú±(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå ·¥ú…¥·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.")
            return

        conn = self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ()
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) as total_users FROM users")
        total_users = cur.fetchone()["total_users"]
        cur.execute("SELECT COUNT(*) as total_accounts FROM accounts")
        total_accounts = cur.fetchone()["total_accounts"]
        cur.execute("SELECT SUM(credits) as total_credits FROM users")
        total_credits = cur.fetchone()["total_credits"] or 0
        cur.execute("SELECT SUM(used) as total_used FROM users")
        total_used = cur.fetchone()["total_used"] or 0
        conn.close()

        await update.message.reply_text(
            f"üìä ** ô·¥è·¥õ Íú±·¥õ·¥Ä·¥õ…™Íú±·¥õ…™·¥ÑÍú±** üìä\n\n"
            f"üë• **·¥õ·¥è·¥õ·¥Ä ü ·¥úÍú±·¥á ÄÍú±:** `{total_users}`\n"
            f"üìß **·¥õ·¥è·¥õ·¥Ä ü ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õÍú±:** `{total_accounts}`\n"
            f"üíé **·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±:** `{total_credits}`\n"
            f"üîÑ **·¥õ·¥è·¥õ·¥Ä ü ·¥úÍú±·¥á·¥Ö:** `{total_used}`\n"
            f"üìà ** Ä·¥á·¥ç·¥Ä…™…¥…™…¥…¢:** `{total_credits - total_used}`",
            parse_mode="Markdown"
        )

    async def ·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_·¥Ä·¥Ö·¥Ö·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå ·¥ú…¥·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.")
            return

        if len(context.args) < 2:
            await update.message.reply_text("üìù Usage: /addcredits <user_id> <amount>")
            return

        try:
            target_user = int(context.args[0])
            amount = int(context.args[1])
        except ValueError:
            await update.message.reply_text("‚ùå Invalid user_id or amount.")
            return

        conn = self._·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ()
        cur = conn.cursor()
        cur.execute("UPDATE users SET credits = credits + ? WHERE user_id = ?", (amount, target_user))
        conn.commit()
        conn.close()

        await update.message.reply_text(f"‚úÖ Added `{amount}` credits to user `{target_user}`.", parse_mode="Markdown")

    # ---------------------------
    #  Ä·¥ú…¥  ô·¥è·¥õ
    # ---------------------------
    def ·¥†…™Íú± ú·¥Ä ü_ Ä·¥ú…¥(self):
        app = Application.builder().token(BOT_TOKEN).build()

        app.add_handler(CommandHandler("start", self.·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_Íú±·¥õ·¥Ä Ä·¥õ))
        app.add_handler(CommandHandler("credits", self.·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±))
        app.add_handler(CommandHandler("create", self.·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_·¥Ñ Ä·¥á·¥Ä·¥õ·¥á))
        app.add_handler(CommandHandler("mass", self.·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_·¥ç·¥ÄÍú±Íú±))
        app.add_handler(CommandHandler("stats", self.·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_Íú±·¥õ·¥Ä·¥õÍú±))
        app.add_handler(CommandHandler("addcredits", self.·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_·¥Ä·¥Ö·¥Ö·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±))
        app.add_handler(CommandHandler("broadcast", self.·¥†…™Íú± ú·¥Ä ü_·¥Ñ·¥ç·¥Ö_ ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ))
        app.add_handler(CallbackQueryHandler(self.·¥†…™Íú± ú·¥Ä ü_ ú·¥Ä…¥·¥Ö ü·¥á_·¥Ñ·¥Ä ü ü ô·¥Ä·¥Ñ·¥ã))

        logger.info("ü§ñ ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú±  ô·¥è·¥õ …™Íú± Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢...")
        app.run_polling()

# ---------------------------
# ·¥á…¥·¥õ Ä è ·¥ò·¥è…™…¥·¥õ
# ---------------------------
if __name__ == "__main__":
    bot = ·¥Ñ ü·¥è·¥ú·¥Ö·¥°·¥Ä èÍú± ô·¥è·¥õ()
    bot.·¥†…™Íú± ú·¥Ä ü_ Ä·¥ú…¥()